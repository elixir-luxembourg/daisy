services:
    # Web Application
    web:
        build: .
        expose:
            - "5000"
        environment:
            - DJANGO_SETTINGS_MODULE=elixir_daisy.settings_compose
        volumes:
            - statics:/static
            - solrdata:/solr
        networks:
            - daisy_network
        depends_on:
            db:
                condition: service_healthy
            solr:
                condition: service_healthy
            mq:
                condition: service_healthy
        command: gunicorn --reload -w 2 -b :5000 --pid /code/gunicorn.pid elixir_daisy.wsgi
        user: "1000:1000"  # Run as a non-root user
        healthcheck:
            test: ["CMD-SHELL", "curl --fail http://localhost:5000 || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 5

    # PostgreSQL Database
    db:
        image: postgres:16.4-alpine
        restart: unless-stopped
        expose:
            - "5432"
        environment:
            POSTGRES_PASSWORD: ${DB_PASSWORD:-daisy}
            POSTGRES_USER: ${DB_USER:-daisy}
            POSTGRES_DB: ${DB_NAME:-daisy}
        networks:
            - daisy_network
        volumes:
            - pgdata:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-daisy}"]
            interval: 10s
            timeout: 5s
            retries: 5

    # Web Server Frontend (Nginx)
    nginx:
        build: ./docker/nginx
        restart: unless-stopped
        volumes:
            - statics:/public/static:ro
            - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        ports:
            - "80:80"
            - "443:443"
        networks:
            - daisy_network
        healthcheck:
            test: [ "CMD-SHELL", "curl --fail http://localhost || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 5
        depends_on:
            web:
                condition: service_healthy

    # Full-Text Search (Solr)
    solr:
        build: ./docker/solr
        restart: unless-stopped
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8983/solr/" ]
            interval: 10s
            timeout: 5s
            retries: 5
        expose:
            - "8983"
        networks:
            - daisy_network
        volumes:
            - solrdata:/opt/solr/server/solr
        user: "8983:1000"

    # Message Queue (RabbitMQ)
    mq:
        image: rabbitmq:3.9-management-alpine
        restart: unless-stopped
        expose:
            - "15672"
            - "5672"
        networks:
            - daisy_network
        healthcheck:
            test: ["CMD", "rabbitmqctl", "status"]
            interval: 10s
            timeout: 5s
            retries: 5
        user: "1000:1000"

    # Task Monitoring (Flower)
    flower:
        image: mher/flower:0.9.7
        command: --broker=amqp://guest:guest@mq:5672// --broker_api=http://guest:guest@mq:15672/api/
        ports:
            - "5555:5555"
        restart: unless-stopped
        networks:
            - daisy_network
        depends_on:
            mq:
                condition: service_healthy
        user: "1000:1000"
        profiles: ["debug"]

    # Task Runner (Celery Worker)
    worker:
        build: .
        environment:
            - DJANGO_SETTINGS_MODULE=elixir_daisy.settings_compose
        volumes:
            - .:/code
        depends_on:
            db:
                condition: service_healthy
            mq:
                condition: service_healthy
        restart: unless-stopped
        healthcheck:
            test: [ "CMD-SHELL", "celery -A elixir_daisy.celery_app inspect ping" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - daisy_network
        command: "celery -A elixir_daisy.celery_app worker --loglevel=DEBUG"
        user: "1000:1000"

    # Celery Beat
    beat:
        build: .
        environment:
            - DJANGO_SETTINGS_MODULE=elixir_daisy.settings_compose
        volumes:
            - .:/code
        depends_on:
            db:
                condition: service_healthy
            mq:
                condition: service_healthy
        healthcheck:
            test: [ "CMD-SHELL", "celery -A elixir_daisy.celery_app inspect ping" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - daisy_network
        command: "celery -A elixir_daisy beat --loglevel=DEBUG --pidfile= --scheduler django_celery_beat.schedulers:DatabaseScheduler"
        user: "1000:1000"

    # Backup Service
    backup:
        image: alpine:3.20.3
        environment:
            - DB_HOST=db
            - DB_PORT=5432
            - DB_NAME=${DB_NAME:-daisy}
            - DB_USER=${DB_USER:-daisy}
            - DB_PASSWORD=${DB_PASSWORD:-daisy}
            - BACKUP_DIR=/backups
            - MEDIA_DIR=/code/documents
            - SOLR_PORT=8983
            - RABBITMQ_MANAGEMENT_PORT=${RABBITMQ_MANAGEMENT_PORT:-15672}
            - BACKUP_VOLUME=${BACKUP_VOLUME:-../backups}
        volumes:
            - ${BACKUP_VOLUME:-../backups}:/backups
            - .:/code
            - /var/run/docker.sock:/var/run/docker.sock
        working_dir: /code
        restart: unless-stopped
        depends_on:
            db:
                condition: service_healthy
        networks:
            - daisy_network
        entrypoint: >
            sh -c "apk add --no-cache docker-cli docker-compose postgresql-client lsof &&
                   chmod +x /code/scripts/db.sh &&
                   tail -f /dev/null"

volumes:
    pgdata:
    statics:
    solrdata:
    backups:

networks:
    daisy_network:
        driver: bridge
