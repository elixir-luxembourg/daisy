# Generated by Django 2.1.7 on 2019-03-05 15:22

import core.models.data_declaration
import core.models.document
import core.models.storage_location
import core.models.utils
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import enumchoicefield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', core.models.utils.TextFieldWithInputWidget(max_length=128)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='Access',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('access_notes', models.TextField(help_text='Remarks on why and how access was given, what is the purpose of use.', max_length=255, verbose_name='Remarks')),
                ('granted_on', models.DateField(blank=True, help_text='The date on which data access was granted.', null=True, verbose_name='Granted on')),
                ('grant_expires_on', models.DateField(blank=True, help_text='The date on which data access will expire.', null=True, verbose_name='Grant expires on')),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('elu_accession', core.models.utils.TextFieldWithInputWidget(help_text='The reference identifier for this cohort in LCSB databases/applications.', unique=True, verbose_name='LCSB accession number')),
                ('ethics_confirmation', models.BooleanField(default=True, help_text="Is the existence of the study's ethics approval confirmed by the cohort owner.", verbose_name='Confirmation of Ethics Approval?')),
                ('comments', models.TextField(blank=True, help_text='Any additional remarks on this cohort.', null=True, verbose_name='Comments')),
                ('title', core.models.utils.TextFieldWithInputWidget(help_text='The name with which this cohort is commonly known.', max_length=255, unique=True, verbose_name='Title')),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('address', core.models.utils.TextFieldWithInputWidget(blank=True, null=True, verbose_name='Address')),
                ('email', models.EmailField(max_length=254, verbose_name='E-mail of the contact')),
                ('first_name', core.models.utils.TextFieldWithInputWidget(verbose_name='First name of the contact')),
                ('last_name', core.models.utils.TextFieldWithInputWidget(verbose_name='Last name of the contact')),
                ('phone', core.models.utils.TextFieldWithInputWidget(blank=True, max_length=32, null=True, verbose_name='Phone')),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', core.models.utils.TextFieldWithInputWidget(max_length=128, unique=True, verbose_name='Name of the contact type')),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('comments', models.TextField(blank=True, help_text='Provide remarks on this contract.', null=True, verbose_name='Other comments')),
            ],
            options={
                'ordering': ['added'],
                'permissions': (('admin', 'Responsible of the project'), ('edit', 'Edit the project'), ('delete', 'Delete the project'), ('view', 'View the project'), ('protected', 'View the protected elements')),
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='DataDeclaration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('comments', models.TextField(blank=True, help_text='Pleae provide any remarks on the source and nature of data.', null=True, verbose_name='Other comments')),
                ('consent_status', enumchoicefield.fields.EnumChoiceField(default=core.models.data_declaration.ConsentStatus(1), enum_class=core.models.data_declaration.ConsentStatus, help_text="Is the consent given by data subjects heterogeneous or homogeneous. Homogeneous consent  means that all subjects' data have the same restrictions. Heterogeneous means that there are differences among consents given by subjects, therefore  there are differing use restrictions on data.", max_length=13)),
                ('data_types_notes', models.TextField(blank=True, help_text='Remarks on data types, especially if dealing with a data type not present in the predefined list.', null=True, verbose_name='Data types notes')),
                ('deidentification_method', enumchoicefield.fields.EnumChoiceField(default=core.models.data_declaration.DeidentificationMethod(2), enum_class=core.models.data_declaration.DeidentificationMethod, help_text='How has the data been de-identified, is it pseudonymized or anonymized?', max_length=16, verbose_name='Deidentification method')),
                ('embargo_date', models.DateField(blank=True, help_text='If there is an embargo date associated with data, please specify it. Data cannot be published before the embargo date.', null=True, verbose_name='Embargo date')),
                ('end_of_storage_duration', models.DateField(blank=True, help_text='Is the data obtained for a limited duration? If so please state the storage end date for data.', null=True, verbose_name='Storage end date')),
                ('storage_duration_criteria', models.TextField(blank=True, null=True)),
                ('has_special_subjects', models.NullBooleanField(default=None, help_text='"Special subjects" refers to minors or those unable to give consent themselves e.g. advanced-stage dementia patients. If the data is collected from such subjects, please tick this box and provide an description.', verbose_name='Has special subjects?')),
                ('other_external_id', core.models.utils.TextFieldWithInputWidget(blank=True, help_text='If the dataset has another external identifier such as accession number(s) or DOI(s), then please state them here.', null=True, verbose_name='Other Identifiers')),
                ('share_category', enumchoicefield.fields.EnumChoiceField(blank=True, enum_class=core.models.data_declaration.ShareCategory, max_length=17, null=True, verbose_name='Share category')),
                ('special_subjects_description', models.TextField(blank=True, help_text='This field should describe the nature of special data subjects (e.g. minors, elderly etc).', null=True, verbose_name='Description of special subjects')),
                ('subjects_category', enumchoicefield.fields.EnumChoiceField(default=core.models.data_declaration.SubjectCategory(4), enum_class=core.models.data_declaration.SubjectCategory, help_text='This field designates if the data subjects are cases or controls or both.', max_length=18, verbose_name='Subjects category')),
                ('submission_id', core.models.utils.TextFieldWithInputWidget(blank=True, help_text='This is the reference number in the submission portal. This field is only applicable for data submitted via the Submission Portal.', null=True, verbose_name='Submission ID')),
                ('title', core.models.utils.TextFieldWithInputWidget(help_text='Title is a brief description for the  data declaration. Think of how you - in the lab - refer to  data from a particular source; use that as the title.', max_length=255, unique=True, verbose_name='Title')),
                ('unique_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This is the unique identifier used by DAISY for this dataset. This field annot be edited.', unique=True, verbose_name='Unique identifier')),
                ('cohorts', models.ManyToManyField(blank=True, help_text='If the data is collected from subjects from a known/predefined Cohort please select it from the list.', related_name='data_declarations', to='core.Cohort')),
                ('contract', models.ForeignKey(help_text='The Contract that ensures the legal receipt, keeping and analysis of this data.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='data_declarations', to='core.Contract')),
                ('data_declarations_parents', models.ManyToManyField(blank=True, help_text='If this data declaration is based on or derived from an earlier declaration, then this field points to that ancestor/source declaration.', related_name='data_declarations_derivated', to='core.DataDeclaration', verbose_name='')),
            ],
            options={
                'ordering': ['added'],
                'permissions': (('admin', 'Responsible of the dataset'), ('edit', 'Edit the dataset'), ('delete', 'Delete the dataset'), ('view', 'View the dataset'), ('protected', 'View the protected elements')),
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='DataLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('category', enumchoicefield.fields.EnumChoiceField(default=core.models.storage_location.StorageLocationCategory(1), enum_class=core.models.storage_location.StorageLocationCategory, max_length=6, verbose_name='Nature of data copy.')),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('comments', models.TextField(blank=True, help_text="Comments should provide any remarks on the dataset such as data's purpose.", null=True, verbose_name='Other Comments')),
                ('is_published', models.BooleanField(default=False, help_text='Published field designates whether this dataset should be included in the Data Catalog. This field cannot be changed by user.', verbose_name='Is published?')),
                ('other_external_id', core.models.utils.TextFieldWithInputWidget(blank=True, help_text='If the dataset has other external identifiers such as an Accession Number or a DOI, please list them here.', null=True, verbose_name='Other Identifiers')),
                ('title', core.models.utils.TextFieldWithInputWidget(help_text='Title is a descriptive long name for the dataset.', max_length=255, unique=True, verbose_name='Title')),
                ('unique_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This is the unique identifier used by DAISY to track this dataset. This field cannot be changed by user.', unique=True, verbose_name='Unique identifier')),
                ('local_custodians', models.ManyToManyField(help_text='Local custodians are the local responsibles for the dataset, this list must include a PI.', related_name='datasets', to=settings.AUTH_USER_MODEL, verbose_name='Local custodians')),
            ],
            options={
                'ordering': ['added'],
                'permissions': (('admin', 'Responsible of the dataset'), ('edit', 'Edit the dataset'), ('delete', 'Delete the dataset'), ('view', 'View the dataset'), ('protected', 'View the protected elements')),
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='DatasetGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Dataset')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Dataset')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', core.models.utils.TextFieldWithInputWidget(verbose_name='Data type')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.DataType')),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='DiseaseTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('term_id', models.CharField(max_length=200)),
                ('label', models.CharField(max_length=300)),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content', models.FileField(upload_to=core.models.document.get_file_name)),
                ('content_url', models.URLField(blank=True, null=True, verbose_name='Document Url')),
                ('content_notes', models.TextField(null=True, verbose_name='Document Notes')),
                ('domain_type', models.TextField(choices=[('not_specified', 'Not Specified'), ('agreement', 'Agreement'), ('ethics_approval', 'Ethics Approval'), ('consent_form', 'Consent Form'), ('subject_informationsheet', 'Subject InformationSheet'), ('project_proposal', 'Project Proposal'), ('other', 'Other')], default='not_specified', verbose_name='Domain Type')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['added'],
                'permissions': (('protected', 'Protected document'),),
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', core.models.utils.TextFieldWithInputWidget(max_length=128, verbose_name='Name of the type of the document')),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='FundingSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', core.models.utils.TextFieldWithInputWidget(max_length=255, unique=True, verbose_name='Funding sources name')),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='GDPRRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', core.models.utils.TextFieldWithInputWidget()),
                ('display_name', core.models.utils.TextFieldWithInputWidget()),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='GeneTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('term_id', models.CharField(max_length=200)),
                ('label', models.CharField(max_length=300)),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('acronym', core.models.utils.TextFieldWithInputWidget(help_text='The acronym for the partner institutes name e.g. EMBL for European Molecular Biology Laboratory.', max_length=255, verbose_name='Acronym')),
                ('elu_accession', models.CharField(default='-', max_length=20)),
                ('address', core.models.utils.TextFieldWithInputWidget(help_text='The contact address of the partner.', verbose_name='Address')),
                ('geo_category', models.CharField(choices=[('EU', 'EU'), ('Non_EU', 'Non-EU'), ('International', 'International'), ('National', 'National')], default='EU', help_text='The  category of the geo-location of partner.', max_length=20, verbose_name='Geo-Category')),
                ('sector_category', models.CharField(choices=[('PUBLIC', 'Public'), ('PRIVATE_NP', 'Private Non-Profit'), ('PRIVATE_P', 'Private For-Profit')], default='PUBLIC', help_text='The  category of the sector that the partner operates in.', max_length=20, verbose_name='Sector-Category')),
                ('is_clinical', models.BooleanField(default=False, help_text='Please select if this is a clinical partner.', verbose_name='Is clinical?')),
                ('is_published', models.BooleanField(default=False, help_text='Please select if ELU_Accession is present ', verbose_name='Is published?')),
                ('name', core.models.utils.TextFieldWithInputWidget(help_text='The name of the partner institute.', unique=True, verbose_name='Name')),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='PartnerRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('contacts', models.ManyToManyField(related_name='partners_roles', to='core.Contact', verbose_name='Contacts')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partners_roles', to='core.Contract', verbose_name='Contract')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partners_roles', to='core.Partner', verbose_name='Partner')),
                ('roles', models.ManyToManyField(related_name='partners_roles', to='core.GDPRRole', verbose_name='Partner roles')),
            ],
        ),
        migrations.CreateModel(
            name='PhenotypeTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('term_id', models.CharField(max_length=200)),
                ('label', models.CharField(max_length=300)),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('acronym', models.CharField(help_text='Acronym is the short project name.', max_length=200, unique=True, verbose_name='Acronym')),
                ('cner_notes', models.TextField(blank=True, default='', help_text='Provide notes on national ethics approval. If it does not exist, please state justifications here.', null=True, verbose_name='National ethics approval notes')),
                ('comments', models.TextField(blank=True, help_text='Any remarks other than the project description can be provided here.', null=True, verbose_name='Other comments')),
                ('description', models.TextField(blank=True, help_text="Lay summary should provide a brief overview of project goals and approach. Lay summary may be displayed publicly if the project's data gets published in the data catalog", null=True, verbose_name='Lay summary')),
                ('dpia', models.TextField(blank=True, null=True, verbose_name='DPIA Link')),
                ('end_date', models.DateField(blank=True, help_text='Formal end date of project.', null=True, verbose_name='End date')),
                ('erp_notes', models.TextField(blank=True, default='', help_text='Provide notes on institutional ethics approval. If it does not exist, please state justifications here.', null=True, verbose_name='Institutional ethics approval notes.')),
                ('has_cner', models.BooleanField(default=False, help_text="Does the project have an ethics approval from a national body. E.g. In Luxembourg this would be Comité National d'Ethique de Recherche (CNER)", verbose_name='Has National Ethics Approval?')),
                ('has_erp', models.BooleanField(default=False, help_text='Does the project have an ethics approval from an institutional body. E.g. At the LCSB this wuld be the Uni-Luxembourg Ethics Review Panel (ERP)', verbose_name='Has Institutional Ethics Approval?')),
                ('includes_automated_profiling', models.BooleanField(default=False, help_text='An example of profiling in biomedical research is the calculation of disease ratings or scores from clinical attributes.')),
                ('project_web_page', models.URLField(blank=True, help_text='If the project has a webpage, please provide its URL link here.', verbose_name='Projects URL page')),
                ('start_date', models.DateField(blank=True, help_text='Formal start date of project.', null=True, verbose_name='Start date')),
                ('title', models.CharField(help_text='Title is the descriptive long project name.', max_length=500, null=True, verbose_name='Title')),
                ('company_personnel', models.ManyToManyField(blank=True, help_text='Please select local staff that is part of this project.', related_name='projects', to=settings.AUTH_USER_MODEL, verbose_name='LCSBs personnel')),
                ('contacts', models.ManyToManyField(blank=True, help_text='Contacts are project related people other than local personnel e.g. Project Officer at the European Commission can be recorded as a Contact.', related_name='projects', to='core.Contact', verbose_name='Contact persons')),
                ('disease_terms', models.ManyToManyField(blank=True, help_text="Provide keywords/terms that would characterize the disease that fall in project's scope.", related_name='projects_w_term', to='core.DiseaseTerm', verbose_name='Disease terms')),
                ('funding_sources', models.ManyToManyField(blank=True, help_text='Funding sources are national, international bodies or initiatives that have funded the research project.', related_name='projects_funded', to='core.FundingSource', verbose_name='Funding sources')),
                ('gene_terms', models.ManyToManyField(blank=True, help_text="Select one or more terms that would characterize the genes that fall in project's scope.", to='core.DiseaseTerm', verbose_name='List of gene terms')),
                ('local_custodians', models.ManyToManyField(help_text='Custodians are the local responsibles for the project. This list must include a PI.', related_name='_project_local_custodians_+', to=settings.AUTH_USER_MODEL, verbose_name='Local custodians')),
                ('phenotype_terms', models.ManyToManyField(blank=True, help_text="Select one or more terms that would characterize the phenotypes that fall in project's scope.", related_name='projects_w_term', to='core.PhenotypeTerm', verbose_name='Phenotype terms')),
            ],
            options={
                'ordering': ['added'],
                'permissions': (('admin', 'Responsible of the project'), ('edit', 'Edit the project'), ('delete', 'Delete the project'), ('view', 'View the project'), ('protected', 'View the protected elements')),
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='ProjectGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Project')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Project')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('citation', core.models.utils.TextFieldWithInputWidget(verbose_name='Citation string')),
                ('doi', core.models.utils.TextFieldWithInputWidget(blank=True, max_length=64, null=True, verbose_name='DOI (Digital Object Identifier)')),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='RestrictionClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('code', core.models.utils.TextFieldWithInputWidget(max_length=20, unique=True, verbose_name='Code')),
                ('name', core.models.utils.TextFieldWithInputWidget(max_length=120, unique=True, verbose_name='Name')),
                ('description', core.models.utils.TextFieldWithInputWidget(max_length=500, unique=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='SensitivityClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('code', core.models.utils.TextFieldWithInputWidget(max_length=20, unique=True, verbose_name='Code')),
                ('name', core.models.utils.TextFieldWithInputWidget(max_length=120, unique=True, verbose_name='Name')),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('share_notes', models.TextField(blank=True, help_text='Please state here the safeguards taken for the share, also any other remarks.', max_length=255, null=True, verbose_name='Remarks')),
                ('granted_on', models.DateField(blank=True, help_text='The date on which data sharing started.', null=True, verbose_name='Granted on')),
                ('grant_expires_on', models.DateField(blank=True, help_text='The date on which data sharing will be terminated.', null=True, verbose_name='Grant expires on')),
                ('contract', models.ForeignKey(help_text='The contract that provides the legal basis for this data share.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shares', to='core.Contract', verbose_name='Contract')),
                ('dataset', models.ForeignKey(help_text='The dataset that has been shared.', on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='core.Dataset', verbose_name='Dataset')),
                ('partner', models.ForeignKey(help_text='The Partner with which the data is shared.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shares', to='core.Partner', verbose_name='Share partner')),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='StorageResource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', core.models.utils.TextFieldWithInputWidget(max_length=128, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=128, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('managed_by', models.TextField(verbose_name='Managed by')),
                ('location_definition', models.TextField()),
                ('acl_policy_description', core.models.utils.TextFieldWithInputWidget(blank=True, max_length=255, null=True, verbose_name='Default Access Control Policy of platform')),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='StudyTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('term_id', models.CharField(max_length=200)),
                ('label', models.CharField(max_length=300)),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='UseRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('restriction_class', models.CharField(blank=True, help_text="Select the GA4GH code for the restriction.  Refer to 'GA4GH Consent Codes' for a detailed explanation of each.", max_length=20, null=True, verbose_name='Restriction class')),
                ('notes', models.TextField(blank=True, help_text='Provide a free text description of the restriction.', max_length=255, null=True, verbose_name='Description')),
                ('data_declaration', models.ForeignKey(help_text='The data declaration to which this restriction applies.', on_delete=django.db.models.deletion.CASCADE, related_name='data_use_restrictions', to='core.DataDeclaration')),
            ],
            options={
                'ordering': ['added'],
                'get_latest_by': 'added',
            },
        ),
        migrations.CreateModel(
            name='CloudShare',
            fields=[
                ('datalocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.DataLocation')),
                ('name', core.models.utils.TextFieldWithInputWidget(verbose_name='Name of the account owner')),
                ('path', core.models.utils.TextFieldWithInputWidget(verbose_name='Absolute path to the file or directory')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.datalocation',),
        ),
        migrations.CreateModel(
            name='ExternalDevice',
            fields=[
                ('datalocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.DataLocation')),
                ('owner', core.models.utils.TextFieldWithInputWidget(verbose_name="Owner's name")),
                ('path', core.models.utils.TextFieldWithInputWidget(verbose_name='Absolute path to the file or directory')),
                ('additional_information', models.TextField(verbose_name='Any additionnal information that can help to find the data.')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.datalocation',),
        ),
        migrations.CreateModel(
            name='FilePath',
            fields=[
                ('datalocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.DataLocation')),
                ('path', core.models.utils.TextFieldWithInputWidget(verbose_name='Absolute path to the file or directory')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.datalocation',),
        ),
        migrations.CreateModel(
            name='LocationHolder',
            fields=[
                ('datalocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.DataLocation')),
                ('location', core.models.utils.TextFieldWithInputWidget(verbose_name='Location of the data')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.datalocation',),
        ),
        migrations.CreateModel(
            name='Other',
            fields=[
                ('datalocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.DataLocation')),
                ('location', core.models.utils.TextFieldWithInputWidget(verbose_name='Where is the data.')),
                ('additional_information', models.TextField(verbose_name='Any additionnal information that can help to find the data.')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.datalocation',),
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('datalocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.DataLocation')),
                ('identifier', core.models.utils.TextFieldWithInputWidget(verbose_name='Identifier of the station')),
                ('owner', core.models.utils.TextFieldWithInputWidget(verbose_name="Owner's name")),
                ('path', core.models.utils.TextFieldWithInputWidget(verbose_name='Absolute path to the file or directory')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.datalocation',),
        ),
        migrations.AddField(
            model_name='project',
            name='publications',
            field=models.ManyToManyField(blank=True, to='core.Publication', verbose_name='Projects publications'),
        ),
        migrations.AddField(
            model_name='project',
            name='study_terms',
            field=models.ManyToManyField(blank=True, help_text='Select one or more features that would characterize the project.', related_name='projects_w_type', to='core.StudyTerm', verbose_name='Study features'),
        ),
        migrations.AddField(
            model_name='project',
            name='umbrella_project',
            field=models.ForeignKey(blank=True, help_text='If this project is part of a larger project, then please state the umbrella project here.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_projects', to='core.Project', verbose_name='Umbrella project'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='project',
            field=models.ForeignKey(help_text='This is the project that either generated the data in-house or provisioned it from outside.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='datasets', to='core.Project', verbose_name='Project of origin'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='sensitivity',
            field=models.ForeignKey(blank=True, help_text='Sensitivity denotes the security classification of this dataset.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.SensitivityClass', verbose_name='Sensitivity class'),
        ),
        migrations.AddField(
            model_name='datalocation',
            name='backend',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StorageResource', verbose_name='Storage back-end'),
        ),
        migrations.AddField(
            model_name='datalocation',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_locations', to='core.Dataset'),
        ),
        migrations.AddField(
            model_name='datalocation',
            name='datatypes',
            field=models.ManyToManyField(blank=True, related_name='storage_locations', to='core.DataType', verbose_name='Stored datatypes'),
        ),
        migrations.AddField(
            model_name='datadeclaration',
            name='data_types_generated',
            field=models.ManyToManyField(blank=True, help_text='Select from the list the new types of data generated (if applicable).', related_name='data_declarations_generated', to='core.DataType', verbose_name='Data types generated'),
        ),
        migrations.AddField(
            model_name='datadeclaration',
            name='data_types_received',
            field=models.ManyToManyField(blank=True, help_text='Select from the list the types of data received.', related_name='data_declarations_received', to='core.DataType', verbose_name='Data types received'),
        ),
        migrations.AddField(
            model_name='datadeclaration',
            name='dataset',
            field=models.ForeignKey(help_text='The dataset that embodies this data.', on_delete=django.db.models.deletion.CASCADE, related_name='data_declarations', to='core.Dataset'),
        ),
        migrations.AddField(
            model_name='datadeclaration',
            name='partner',
            field=models.ForeignKey(help_text='The Partner/Institute that have provided this data.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='data_declarations', to='core.Partner'),
        ),
        migrations.AddField(
            model_name='contract',
            name='company_roles',
            field=models.ManyToManyField(help_text='Please select the GDPR roles assumed by LCSB as per this contract.', related_name='contracts', to='core.GDPRRole', verbose_name='LCSBs roles'),
        ),
        migrations.AddField(
            model_name='contract',
            name='local_custodians',
            field=models.ManyToManyField(help_text='Custodians are the local parties to the contract. Custodian list must include all the PIs, whose names appear on the contract.', related_name='contracts', to=settings.AUTH_USER_MODEL, verbose_name='Local custodians'),
        ),
        migrations.AddField(
            model_name='contract',
            name='project',
            field=models.ForeignKey(help_text='If this Contract is signed within the scope of particular Project, then it should be denoted here.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contracts', to='core.Project', verbose_name='Project'),
        ),
        migrations.AddField(
            model_name='contact',
            name='partners',
            field=models.ManyToManyField(related_name='contacts', to='core.Partner', verbose_name='Affiliation(s)'),
        ),
        migrations.AddField(
            model_name='contact',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ContactType', verbose_name='Type of the contact'),
        ),
        migrations.AddField(
            model_name='cohort',
            name='institutes',
            field=models.ManyToManyField(blank=True, help_text='The partner institutes involved in the running of this cohort study.', to='core.Partner', verbose_name='Institutes'),
        ),
        migrations.AddField(
            model_name='cohort',
            name='owners',
            field=models.ManyToManyField(help_text="Cohort owners are typically clinicians that supervise the recruitment of subjects. They have access to subjects' identities and deal with subject's requests.", to='core.Contact', verbose_name='Cohort owner(s)'),
        ),
        migrations.AddField(
            model_name='access',
            name='dataset',
            field=models.ForeignKey(help_text='The dataset to which access is given.', on_delete=django.db.models.deletion.CASCADE, related_name='accesses', to='core.Dataset', verbose_name='Dataset'),
        ),
        migrations.AddField(
            model_name='access',
            name='defined_on_locations',
            field=models.ManyToManyField(help_text='The dataset locations on which access is defined.', related_name='accesses', to='core.DataLocation', verbose_name='Data Locations'),
        ),
        migrations.AddField(
            model_name='access',
            name='project',
            field=models.ForeignKey(blank=True, help_text='If the access was given in the scope of a particular Project please specify.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='accesses_to_existing_datasets', to='core.Project', verbose_name='Project'),
        ),
        migrations.AlterUniqueTogether(
            name='projectuserobjectpermission',
            unique_together={('user', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='projectgroupobjectpermission',
            unique_together={('group', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='datasetuserobjectpermission',
            unique_together={('user', 'permission', 'content_object')},
        ),
        migrations.AlterUniqueTogether(
            name='datasetgroupobjectpermission',
            unique_together={('group', 'permission', 'content_object')},
        ),
    ]
